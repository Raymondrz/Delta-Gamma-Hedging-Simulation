Function RandN()   RandN = Application.NormSInv(Rnd())End Function

Function Black_Scholes_Call(S, K, r, sigma, q, T)'' Inputs are S = initial stock price'            K = strike price'            r = risk-free rate'            sigma = volatility'            q = dividend yield'            T = time to maturity'Dim d1, d2, N1, N2If sigma = 0 Then    Black_Scholes_Call = Application.Max(0, Exp(-q * T) * S - Exp(-r * T) * K)Else    d1 = (Log(S / K) + (r - q + 0.5 * sigma * sigma) * T) / (sigma * Sqr(T))    d2 = d1 - sigma * Sqr(T)    N1 = Application.NormSDist(d1)    N2 = Application.NormSDist(d2)    Black_Scholes_Call = Exp(-q * T) * S * N1 - Exp(-r * T) * K * N2End IfEnd Function

Function Black_Scholes_Call_Delta(S, K, r, sigma, q, T)'' Inputs are S = initial stock price'            K = strike price'            r = risk-free rate'            sigma = volatility'            q = dividend yield'            T = time to maturity'Dim d1, d2, N1, N2d1 = (Log(S / K) + (r - q + 0.5 * sigma * sigma) * T) / (sigma * Sqr(T))d2 = d1 - sigma * Sqr(T)N1 = Application.NormSDist(d1)N2 = Application.NormSDist(d2)Black_Scholes_Call_Delta = Exp(-q * T) * N1End FunctionFunction Black_Scholes_Call_Gamma(S, K, r, sigma, q, T)'' Inputs are S = initial stock price'            K = strike price'            r = risk-free rate'            sigma = volatility'            q = dividend yield'            T = time to maturity'Dim d1, d2, N1, N2, nd1d1 = (Log(S / K) + (r - q + 0.5 * sigma * sigma) * T) / (sigma * Sqr(T))d2 = d1 - sigma * Sqr(T)N1 = Application.NormSDist(d1)N2 = Application.NormSDist(d2)nd1 = Exp(-d1 * d1 / 2) / Sqr(2 * Application.Pi)Black_Scholes_Call_Gamma = Exp(-q * T) * nd1 / (S * sigma * Sqr(T))End Function


Function Simulated_Delta_Gamma_Hedge_Profit(S0, K, Kh, r, sigma, q, T, mu, M, N, pct)'' Inputs are S0 = initial stock price'            K = strike price of short option'            Kh = strike price of option used to hedge'            r = risk-free rate'            sigma = volatility'            q = dividend yield'            T = time to maturity'            mu = expected rate of return'            N = number of time periods'            M = number of simulations'            pct = percentile to be returned'Dim dt, SigSqrdt, drift, LogS0, Call0, A0, B0, Cash0, Comp, divDim S, LogS, Cash, NewS, A, NewA, B, NewB, Priceh, HedgeValue, i, jDim delta, deltah, Gamma, GammahDim Profit() As DoubleReDim Profit(M)'' Constants'dt = T / NSigSqrdt = sigma * Sqr(dt)drift = (mu - q - 0.5 * sigma * sigma) * dtComp = Exp(r * dt)div = Exp(q * dt) - 1'' Initialize and store variables'LogS0 = Log(S0)Call0 = Black_Scholes_Call(S0, K, r, sigma, q, T)Gamma = Black_Scholes_Call_Gamma(S0, K, r, sigma, q, T)Gammah = Black_Scholes_Call_Gamma(S0, Kh, r, sigma, q, T)B0 = Gamma / Gammahdelta = Black_Scholes_Call_Delta(S0, K, r, sigma, q, T)deltah = Black_Scholes_Call_Delta(S0, Kh, r, sigma, q, T)A0 = delta - B0 * deltahPriceh = Black_Scholes_Call(S0, Kh, r, sigma, q, T)Cash0 = Call0 - A0 * S0 - B0 * Priceh'' Simulate M paths'For i = 0 To M    '    ' Initialize variables at start of path    '    LogS = LogS0              ' initialize log of stock price    S = S0                    ' initialize stock price    Cash = Cash0              ' initialize cash position    A = A0                    ' initialize beginning stock position    B = B0                    ' initialize holding of hedge option    '    ' Simulate path to date T - dt    '    For j = 1 To N - 1        '        ' Simulate S        '        LogS = LogS + drift + SigSqrdt * RandN()        NewS = Exp(LogS)        '        ' Update portfolio        '        Gamma = Black_Scholes_Call_Gamma(NewS, K, r, sigma, q, T)        Gammah = Black_Scholes_Call_Gamma(NewS, Kh, r, sigma, q, T)        NewB = Gamma / Gammah        delta = Black_Scholes_Call_Delta(NewS, K, r, sigma, q, T)        deltah = Black_Scholes_Call_Delta(NewS, Kh, r, sigma, q, T)        NewA = delta - NewB * deltah        Priceh = Black_Scholes_Call(NewS, Kh, r, sigma, q, T - j * dt)        Cash = Comp * Cash + A * S * div - (NewA - A) * NewS - (NewB - B) * Priceh        S = NewS             ' update stock price        A = NewA             ' update stock position        B = NewB             ' update holding of hedge option    Next j    '    ' Simulate at date T    '    LogS = LogS + drift + SigSqrdt * RandN() ' final log of stock price    NewS = Exp(LogS)                         ' final stock price    Priceh = Application.Max(NewS - Kh, 0)   ' final value of hedge option    HedgeValue = Comp * Cash + A * S * div + A * NewS + B * Priceh    Profit(i) = HedgeValue - Application.Max(NewS - K, 0)Next iSimulated_Delta_Gamma_Hedge_Profit = Application.Percentile(Profit, pct)End Function
